import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import heapq
import time
import random
import threading
from typing import List, Tuple, Optional

class PuzzleState:
    """L·ªõp ƒë·∫°i di·ªán cho m·ªôt tr·∫°ng th√°i c·ªßa puzzle 15"""
    
    def __init__(self, board: List[int], moves: int = 0, parent=None, last_move: str = ''):
        self.board = board[:]
        self.moves = moves
        self.parent = parent
        self.last_move = last_move
        self.empty_pos = self._find_empty()
        self.heuristic = self._calculate_manhattan()
        self.cost = self.moves + self.heuristic
    
    def _find_empty(self) -> Tuple[int, int]:
        """T√¨m v·ªã tr√≠ √¥ tr·ªëng (s·ªë 0)"""
        pos = self.board.index(0)
        return (pos // 4, pos % 4)
    
    def _calculate_manhattan(self) -> int:
        """T√≠nh Manhattan Distance - heuristic function"""
        distance = 0
        for i in range(16):
            if self.board[i] != 0:
                current_row, current_col = i // 4, i % 4
                target_row, target_col = (self.board[i] - 1) // 4, (self.board[i] - 1) % 4
                distance += abs(current_row - target_row) + abs(current_col - target_col)
        return distance
    
    def is_goal(self) -> bool:
        """Ki·ªÉm tra xem ƒë√£ ƒë·∫°t tr·∫°ng th√°i ƒë√≠ch ch∆∞a"""
        return self.board == list(range(1, 16)) + [0]
    
    def get_neighbors(self) -> List['PuzzleState']:
        """T·∫°o c√°c tr·∫°ng th√°i k·∫ø ti·∫øp c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c"""
        neighbors = []
        row, col = self.empty_pos
        
        directions = [
            (-1, 0, 'XU·ªêNG'),
            (1, 0, 'L√äN'),
            (0, -1, 'PH·∫¢I'),
            (0, 1, 'TR√ÅI')
        ]
        
        for dr, dc, move_name in directions:
            new_row, new_col = row + dr, col + dc
            
            if 0 <= new_row < 4 and 0 <= new_col < 4:
                new_board = self.board[:]
                empty_index = row * 4 + col
                new_index = new_row * 4 + new_col
                
                new_board[empty_index], new_board[new_index] = new_board[new_index], new_board[empty_index]
                
                neighbors.append(PuzzleState(new_board, self.moves + 1, self, 
                                           f"Di chuy·ªÉn {new_board[empty_index]} {move_name}"))
        
        return neighbors
    
    def __lt__(self, other):
        return self.cost < other.cost
    
    def __eq__(self, other):
        return self.board == other.board
    
    def __hash__(self):
        return hash(tuple(self.board))

class PuzzleSolver:
    """B·ªô gi·∫£i puzzle s·ª≠ d·ª•ng thu·∫≠t to√°n A*"""
    
    def __init__(self):
        self.explored_count = 0
        self.max_frontier_size = 0
        self.is_solving = False
    
    def is_solvable(self, board: List[int]) -> bool:
        """Ki·ªÉm tra xem puzzle c√≥ gi·∫£i ƒë∆∞·ª£c kh√¥ng"""
        inversions = 0
        flat_board = [x for x in board if x != 0]
        
        for i in range(len(flat_board)):
            for j in range(i + 1, len(flat_board)):
                if flat_board[i] > flat_board[j]:
                    inversions += 1
        
        empty_row = 4 - (board.index(0) // 4)
        
        if empty_row % 2 == 1:
            return inversions % 2 == 0
        else:
            return inversions % 2 == 1
    
    def solve(self, initial_board: List[int], progress_callback=None, stop_callback=None):
        """Gi·∫£i puzzle b·∫±ng thu·∫≠t to√°n A*"""
        start_time = time.time()
        self.is_solving = True
            
        if not self.is_solvable(initial_board):
            return None, {
                'solvable': False,
                'time': time.time() - start_time,
                'explored': 0,
                'max_frontier': 0
            }
        
        initial_state = PuzzleState(initial_board)
        
        if initial_state.is_goal():
            return [initial_state], {
                'solvable': True,
                'time': time.time() - start_time,
                'explored': 0,
                'max_frontier': 0,
                'solution_length': 0
            }
        
        frontier = [initial_state]
        heapq.heapify(frontier)
        explored = set()
        
        self.explored_count = 0
        self.max_frontier_size = 0
        
        while frontier and self.is_solving:
            if stop_callback and stop_callback():
                self.is_solving = False
                break
                
            self.max_frontier_size = max(self.max_frontier_size, len(frontier))
            
            current = heapq.heappop(frontier)
            
            if tuple(current.board) in explored:
                continue
            
            explored.add(tuple(current.board))
            self.explored_count += 1
            
            # Callback ƒë·ªÉ c·∫≠p nh·∫≠t GUI
            if progress_callback and self.explored_count % 50 == 0:
                progress_callback(self.explored_count, len(frontier), current.heuristic, current.cost)
            
            if current.is_goal():
                path = []
                while current:
                    path.append(current)
                    current = current.parent
                path.reverse()
                
                self.is_solving = False
                return path, {
                    'solvable': True,
                    'time': time.time() - start_time,
                    'explored': self.explored_count,
                    'max_frontier': self.max_frontier_size,
                    'solution_length': len(path) - 1
                }
            
            for neighbor in current.get_neighbors():
                if tuple(neighbor.board) not in explored:
                    heapq.heappush(frontier, neighbor)
        
        self.is_solving = False
        return None, {
            'solvable': False,
            'time': time.time() - start_time,
            'explored': self.explored_count,
            'max_frontier': self.max_frontier_size
        }

class PuzzleGUI:
    """Giao di·ªán ƒë·ªì h·ªça cho 15-Puzzle"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("15-Puzzle Solver - Thu·∫≠t to√°n A*")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2C3E50')
        
        # D·ªØ li·ªáu puzzle
        self.current_board = list(range(1, 16)) + [0]
        self.solution_path = []
        self.solver = PuzzleSolver()
        self.is_solving = False
        self.replay_index = 0
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        self.update_display()
        
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        
        # Header
        header_frame = tk.Frame(self.root, bg='#2C3E50')
        header_frame.pack(pady=20)
        
        title_label = tk.Label(header_frame, text="üß© 15-PUZZLE SOLVER", 
                              font=('Arial', 24, 'bold'), fg='#ECF0F1', bg='#2C3E50')
        title_label.pack()
        
        subtitle_label = tk.Label(header_frame, text="Gi·∫£i b√†i to√°n 15 √¥ s·ªë b·∫±ng Thu·∫≠t to√°n A* (Tr√≠ tu·ªá nh√¢n t·∫°o)",
                                 font=('Arial', 12), fg='#BDC3C7', bg='#2C3E50')
        subtitle_label.pack(pady=5)
        
        # Algorithm info
        algo_frame = tk.LabelFrame(self.root, text="üß† Thu·∫≠t to√°n A*", 
                                  font=('Arial', 12, 'bold'), fg='#ECF0F1', bg='#34495E')
        algo_frame.pack(pady=10, padx=20, fill='x')
        
        algo_text = """f(n) = g(n) + h(n)
‚Ä¢ g(n): Chi ph√≠ t·ª´ tr·∫°ng th√°i ban ƒë·∫ßu ƒë·∫øn n (s·ªë b∆∞·ªõc ƒë√£ ƒëi)
‚Ä¢ h(n): Heuristic Manhattan Distance (∆∞·ªõc t√≠nh ƒë·∫øn ƒë√≠ch)  
‚Ä¢ f(n): T·ªïng ∆∞·ªõc t√≠nh chi ph√≠ ƒë·ªÉ ƒëi qua tr·∫°ng th√°i n"""
        
        tk.Label(algo_frame, text=algo_text, font=('Arial', 10), 
                fg='#ECF0F1', bg='#34495E', justify='left').pack(pady=10)
        
        # Main content frame
        main_frame = tk.Frame(self.root, bg='#2C3E50')
        main_frame.pack(expand=True, fill='both', padx=20)
        
        # Left side - Puzzle
        left_frame = tk.Frame(main_frame, bg='#2C3E50')
        left_frame.pack(side='left', fill='both', expand=True)
        
        # Puzzle frame
        puzzle_frame = tk.LabelFrame(left_frame, text="üéØ B·∫£ng Puzzle", 
                                   font=('Arial', 12, 'bold'), fg='#ECF0F1', bg='#34495E')
        puzzle_frame.pack(pady=10, fill='both', expand=True)
        
        # Puzzle grid
        self.puzzle_frame = tk.Frame(puzzle_frame, bg='#34495E')
        self.puzzle_frame.pack(pady=20)
        
        self.buttons = []
        for i in range(16):
            row, col = i // 4, i % 4
            btn = tk.Button(self.puzzle_frame, text="", width=4, height=2,
                           font=('Arial', 16, 'bold'), 
                           command=lambda r=row, c=col: self.tile_clicked(r, c))
            btn.grid(row=row, column=col, padx=2, pady=2)
            self.buttons.append(btn)
        
        # Control buttons
        control_frame = tk.Frame(left_frame, bg='#2C3E50')
        control_frame.pack(pady=10)
        
        self.shuffle_btn = tk.Button(control_frame, text="üé≤ X√°o tr·ªôn", 
                                   command=self.shuffle_puzzle,
                                   bg='#E74C3C', fg='white', font=('Arial', 10, 'bold'),
                                   padx=20, pady=5)
        self.shuffle_btn.pack(side='left', padx=5)
        
        self.reset_btn = tk.Button(control_frame, text="üîÑ Reset",
                                 command=self.reset_puzzle,
                                 bg='#F39C12', fg='white', font=('Arial', 10, 'bold'),
                                 padx=20, pady=5)
        self.reset_btn.pack(side='left', padx=5)
        
        self.demo_btn = tk.Button(control_frame, text="üìö Demo",
                                command=self.load_demo_puzzle,
                                bg='#9B59B6', fg='white', font=('Arial', 10, 'bold'),
                                padx=20, pady=5)
        self.demo_btn.pack(side='left', padx=5)
        
        # Solve button
        self.solve_btn = tk.Button(left_frame, text="ü§ñ GI·∫¢I B·∫∞NG A* ALGORITHM",
                                 command=self.solve_puzzle,
                                 bg='#27AE60', fg='white', font=('Arial', 12, 'bold'),
                                 pady=10)
        self.solve_btn.pack(pady=20, fill='x')
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(left_frame, variable=self.progress_var, 
                                          mode='indeterminate')
        
        # Right side - Stats and Solution
        right_frame = tk.Frame(main_frame, bg='#2C3E50')
        right_frame.pack(side='right', fill='both', expand=True, padx=(20, 0))
        
        # Stats frame
        stats_frame = tk.LabelFrame(right_frame, text="üìä Th·ªëng k√™ Thu·∫≠t to√°n A*",
                                  font=('Arial', 12, 'bold'), fg='#ECF0F1', bg='#34495E')
        stats_frame.pack(fill='x', pady=10)
        
        # Stats grid
        stats_inner = tk.Frame(stats_frame, bg='#34495E')
        stats_inner.pack(pady=15, padx=10, fill='x')
        
        # Row 1
        tk.Label(stats_inner, text="Tr·∫°ng th√°i kh√°m ph√°:", 
                font=('Arial', 10), fg='#ECF0F1', bg='#34495E').grid(row=0, column=0, sticky='w', pady=5)
        self.explored_label = tk.Label(stats_inner, text="0", 
                                     font=('Arial', 10, 'bold'), fg='#3498DB', bg='#34495E')
        self.explored_label.grid(row=0, column=1, sticky='e', pady=5)
        
        # Row 2
        tk.Label(stats_inner, text="Frontier t·ªëi ƒëa:", 
                font=('Arial', 10), fg='#ECF0F1', bg='#34495E').grid(row=1, column=0, sticky='w', pady=5)
        self.frontier_label = tk.Label(stats_inner, text="0", 
                                     font=('Arial', 10, 'bold'), fg='#E74C3C', bg='#34495E')
        self.frontier_label.grid(row=1, column=1, sticky='e', pady=5)
        
        # Row 3
        tk.Label(stats_inner, text="ƒê·ªô s√¢u gi·∫£i ph√°p:", 
                font=('Arial', 10), fg='#ECF0F1', bg='#34495E').grid(row=2, column=0, sticky='w', pady=5)
        self.depth_label = tk.Label(stats_inner, text="0", 
                                   font=('Arial', 10, 'bold'), fg='#F39C12', bg='#34495E')
        self.depth_label.grid(row=2, column=1, sticky='e', pady=5)
        
        # Row 4
        tk.Label(stats_inner, text="Th·ªùi gian th·ª±c thi:", 
                font=('Arial', 10), fg='#ECF0F1', bg='#34495E').grid(row=3, column=0, sticky='w', pady=5)
        self.time_label = tk.Label(stats_inner, text="0ms", 
                                  font=('Arial', 10, 'bold'), fg='#27AE60', bg='#34495E')
        self.time_label.grid(row=3, column=1, sticky='e', pady=5)
        
        # Row 5
        tk.Label(stats_inner, text="Manhattan Distance:", 
                font=('Arial', 10), fg='#ECF0F1', bg='#34495E').grid(row=4, column=0, sticky='w', pady=5)
        self.manhattan_label = tk.Label(stats_inner, text="0", 
                                      font=('Arial', 10, 'bold'), fg='#9B59B6', bg='#34495E')
        self.manhattan_label.grid(row=4, column=1, sticky='e', pady=5)
        
        # Row 6
        tk.Label(stats_inner, text="Chi ph√≠ hi·ªán t·∫°i f(n):", 
                font=('Arial', 10), fg='#ECF0F1', bg='#34495E').grid(row=5, column=0, sticky='w', pady=5)
        self.cost_label = tk.Label(stats_inner, text="0", 
                                  font=('Arial', 10, 'bold'), fg='#E67E22', bg='#34495E')
        self.cost_label.grid(row=5, column=1, sticky='e', pady=5)
        
        # Configure grid weights
        stats_inner.grid_columnconfigure(1, weight=1)
        
        # Solution frame
        solution_frame = tk.LabelFrame(right_frame, text="üéØ L·ªùi gi·∫£i t·ª´ng b∆∞·ªõc",
                                     font=('Arial', 12, 'bold'), fg='#ECF0F1', bg='#34495E')
        solution_frame.pack(fill='both', expand=True, pady=10)
        
        # Solution text area
        self.solution_text = scrolledtext.ScrolledText(solution_frame, height=15, width=40,
                                                      font=('Consolas', 9), 
                                                      bg='#2C3E50', fg='#ECF0F1',
                                                      insertbackground='#ECF0F1')
        self.solution_text.pack(pady=10, padx=10, fill='both', expand=True)
        
        # Replay controls
        replay_frame = tk.Frame(solution_frame, bg='#34495E')
        replay_frame.pack(pady=10)
        
        self.replay_btn = tk.Button(replay_frame, text="üé¨ Replay",
                                  command=self.start_replay,
                                  bg='#8E44AD', fg='white', font=('Arial', 10, 'bold'),
                                  state='disabled')
        self.replay_btn.pack(side='left', padx=5)
        
        self.stop_btn = tk.Button(replay_frame, text="‚èπÔ∏è D·ª´ng",
                                command=self.stop_solving,
                                bg='#E74C3C', fg='white', font=('Arial', 10, 'bold'),
                                state='disabled')
        self.stop_btn.pack(side='left', padx=5)
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("S·∫µn s√†ng - Nh·∫•n 'X√°o tr·ªôn' ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        status_bar = tk.Label(self.root, textvariable=self.status_var,
                            font=('Arial', 10), fg='#ECF0F1', bg='#34495E',
                            relief='sunken', anchor='w')
        status_bar.pack(side='bottom', fill='x')
    
    def update_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã puzzle"""
        for i in range(16):
            btn = self.buttons[i]
            value = self.current_board[i]
            
            if value == 0:
                btn.config(text="", bg='#7F8C8D', state='disabled',
                          relief='sunken')
            else:
                btn.config(text=str(value), bg='#3498DB', fg='white',
                          state='normal', relief='raised',
                          activebackground='#2980B9')
        
        # C·∫≠p nh·∫≠t stats
        current_state = PuzzleState(self.current_board)
        self.manhattan_label.config(text=str(current_state.heuristic))
        self.cost_label.config(text=str(current_state.cost))
        
        # Ki·ªÉm tra win condition
        if current_state.is_goal():
            self.status_var.set("üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ gi·∫£i th√†nh c√¥ng puzzle!")
            messagebox.showinfo("Th√†nh c√¥ng!", "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh puzzle!")
    
    def tile_clicked(self, row, col):
        """X·ª≠ l√Ω khi click v√†o √¥"""
        if self.is_solving:
            return
            
        clicked_index = row * 4 + col
        empty_index = self.current_board.index(0)
        empty_row, empty_col = empty_index // 4, empty_index % 4
        
        # Ki·ªÉm tra c√≥ th·ªÉ di chuy·ªÉn kh√¥ng
        if (abs(row - empty_row) == 1 and col == empty_col) or \
           (abs(col - empty_col) == 1 and row == empty_row):
            # Di chuy·ªÉn √¥
            self.current_board[clicked_index], self.current_board[empty_index] = \
                self.current_board[empty_index], self.current_board[clicked_index]
            
            # Hi·ªáu ·ª©ng animation
            self.buttons[clicked_index].config(relief='sunken')
            self.root.after(100, lambda: self.update_display())
    
    def shuffle_puzzle(self):
        """X√°o tr·ªôn puzzle"""
        if self.is_solving:
            return
            
        # T·∫°o puzzle ng·∫´u nhi√™n b·∫±ng c√°ch th·ª±c hi·ªán c√°c b∆∞·ªõc h·ª£p l·ªá
        self.current_board = list(range(1, 16)) + [0]
        
        for _ in range(1000):
            empty_index = self.current_board.index(0)
            row, col = empty_index // 4, empty_index % 4
            
            moves = []
            if row > 0: moves.append(empty_index - 4)
            if row < 3: moves.append(empty_index + 4)
            if col > 0: moves.append(empty_index - 1)
            if col < 3: moves.append(empty_index + 1)
            
            new_index = random.choice(moves)
            self.current_board[empty_index], self.current_board[new_index] = \
                self.current_board[new_index], self.current_board[empty_index]
        
        self.update_display()
        self.clear_solution()
        self.status_var.set("ƒê√£ x√°o tr·ªôn puzzle - S·∫µn s√†ng gi·∫£i!")
    
    def reset_puzzle(self):
        """Reset puzzle v·ªÅ tr·∫°ng th√°i ƒë√≠ch"""
        if self.is_solving:
            return
            
        self.current_board = list(range(1, 16)) + [0]
        self.update_display()
        self.clear_solution()
        self.status_var.set("ƒê√£ reset puzzle v·ªÅ tr·∫°ng th√°i ƒë√≠ch")
    
    def load_demo_puzzle(self):
        """Load puzzle demo kh√≥"""
        if self.is_solving:
            return
            
        # Puzzle kh√≥ v·ªõi Manhattan distance cao
        self.current_board = [5, 1, 3, 4, 2, 6, 8, 12, 9, 10, 7, 11, 13, 14, 0, 15]
        self.update_display()
        self.clear_solution()
        self.status_var.set("ƒê√£ load puzzle demo kh√≥ - Manhattan Distance cao!")
    
    def progress_callback(self, explored, frontier_size, heuristic, cost):
        """Callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh"""
        self.explored_label.config(text=f"{explored:,}")
        self.frontier_label.config(text=f"{frontier_size:,}")
        self.manhattan_label.config(text=str(heuristic))
        self.cost_label.config(text=str(cost))
        self.root.update()
    
    def solve_puzzle(self):
        """Gi·∫£i puzzle b·∫±ng A*"""
        if self.is_solving:
            return
            
        if PuzzleState(self.current_board).is_goal():
            messagebox.showinfo("Th√¥ng b√°o", "Puzzle ƒë√£ ƒë∆∞·ª£c gi·∫£i r·ªìi!")
            return
        
        # Ki·ªÉm tra t√≠nh kh·∫£ gi·∫£i
        if not self.solver.is_solvable(self.current_board):
            messagebox.showerror("L·ªói", "Puzzle n√†y kh√¥ng th·ªÉ gi·∫£i ƒë∆∞·ª£c!\n\n" +
                               "Puzzle 15 ch·ªâ c√≥ th·ªÉ gi·∫£i n·∫øu s·ªë inversion ph√π h·ª£p v·ªõi v·ªã tr√≠ √¥ tr·ªëng.")
            return
        
        # B·∫Øt ƒë·∫ßu gi·∫£i trong thread ri√™ng
        self.is_solving = True
        self.solve_btn.config(state='disabled', text="üîÑ ƒêang gi·∫£i...")
        self.stop_btn.config(state='normal')
        self.progress_bar.pack(pady=10, fill='x')
        self.progress_bar.start()
        
        self.status_var.set("ü§ñ ƒêang ch·∫°y thu·∫≠t to√°n A*... Vui l√≤ng ƒë·ª£i")
        
        # Clear previous solution
        self.clear_solution()
        
        # Start solving in background thread
        def solve_thread():
            try:
                solution, stats = self.solver.solve(self.current_board, 
                                                  progress_callback=self.progress_callback,
                                                  stop_callback=lambda: not self.is_solving)
                
                # Update GUI trong main thread
                self.root.after(0, lambda: self.solve_completed(solution, stats))
                
            except Exception as e:
                self.root.after(0, lambda: self.solve_error(str(e)))
        
        threading.Thread(target=solve_thread, daemon=True).start()
    
    def solve_completed(self, solution, stats):
        """Ho√†n th√†nh gi·∫£i puzzle"""
        self.is_solving = False
        self.solve_btn.config(state='normal', text="ü§ñ GI·∫¢I B·∫∞NG A* ALGORITHM")
        self.stop_btn.config(state='disabled')
        self.progress_bar.stop()
        self.progress_bar.pack_forget()
        
        if solution:
            # C·∫≠p nh·∫≠t stats
            self.explored_label.config(text=f"{stats['explored']:,}")
            self.frontier_label.config(text=f"{stats['max_frontier']:,}")
            self.depth_label.config(text=str(stats['solution_length']))
            self.time_label.config(text=f"{stats['time']:.3f}s")
            
            # Hi·ªÉn th·ªã solution
            self.solution_path = solution
            self.display_solution()
            self.replay_btn.config(state='normal')
            
            self.status_var.set(f"‚úÖ T√¨m th·∫•y l·ªùi gi·∫£i trong {stats['solution_length']} b∆∞·ªõc! " +
                              f"Kh√°m ph√° {stats['explored']:,} tr·∫°ng th√°i.")
            
            messagebox.showinfo("Th√†nh c√¥ng!", 
                              f"üéâ T√¨m th·∫•y l·ªùi gi·∫£i t·ªëi ∆∞u!\n\n" +
                              f"üìè S·ªë b∆∞·ªõc: {stats['solution_length']}\n" +
                              f"üîç Tr·∫°ng th√°i kh√°m ph√°: {stats['explored']:,}\n" +
                              f"‚è±Ô∏è Th·ªùi gian: {stats['time']:.3f}s")
        else:
            self.status_var.set("‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi gi·∫£i trong th·ªùi gian cho ph√©p")
            messagebox.showerror("Th·∫•t b·∫°i", "‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y l·ªùi gi·∫£i!")
    
    def solve_error(self, error_msg):
        """X·ª≠ l√Ω l·ªói khi gi·∫£i"""
        self.is_solving = False
        self.solve_btn.config(state='normal', text="ü§ñ GI·∫¢I B·∫∞NG A* ALGORITHM")
        self.stop_btn.config(state='disabled')
        self.progress_bar.stop()
        self.progress_bar.pack_forget()
        
        self.status_var.set(f"‚ùå L·ªói: {error_msg}")
        messagebox.showerror("L·ªói", f"‚ùå C√≥ l·ªói x·∫£y ra: {error_msg}")
    
    def stop_solving(self):
        """D·ª´ng qu√° tr√¨nh gi·∫£i"""
        self.is_solving = False
        self.solver.is_solving = False
        self.status_var.set("‚èπÔ∏è ƒê√£ d·ª´ng qu√° tr√¨nh gi·∫£i")
    
    def display_solution(self):
        """Hi·ªÉn th·ªã l·ªùi gi·∫£i"""
        self.solution_text.delete(1.0, tk.END)
        self.solution_text.insert(tk.END, "üéØ L·ªúI GI·∫¢I T·ª™NG B∆Ø·ªöC:\n")
        self.solution_text.insert(tk.END, "=" * 50 + "\n\n")
        
        for i, state in enumerate(self.solution_path):
            step_text = f"B∆∞·ªõc {i}: {state.last_move if state.last_move else 'Tr·∫°ng th√°i ban ƒë·∫ßu'}\n"
            step_text += f"g(n)={state.moves}, h(n)={state.heuristic}, f(n)={state.cost}\n"
            
            # Hi·ªÉn th·ªã board
            for row in range(4):
                row_text = "‚îÇ"
                for col in range(4):
                    val = state.board[row * 4 + col]
                    if val == 0:
                        row_text += "    ‚îÇ"
                    else:
                        row_text += f" {val:2d} ‚îÇ"
                step_text += row_text + "\n"
            
            step_text += "\n" + "-" * 30 + "\n\n"
            self.solution_text.insert(tk.END, step_text)
    
    def clear_solution(self):
        """X√≥a l·ªùi gi·∫£i"""
        self.solution_text.delete(1.0, tk.END)
        self.solution_path = []
        self.replay_btn.config(state='disabled')
        
        # Reset stats
        self.explored_label.config(text="0")
        self.frontier_label.config(text="0")
        self.depth_label.config(text="0")
        self.time_label.config(text="0ms")
    
    def start_replay(self):
        """B·∫Øt ƒë·∫ßu replay animation"""
        if not self.solution_path:
            return
            
        self.replay_index = 0
        self.replay_btn.config(state='disabled', text="üé¨ ƒêang replay...")
        self.replay_step()
    
    def replay_step(self):
        """Th·ª±c hi·ªán m·ªôt b∆∞·ªõc replay"""
        if self.replay_index >= len(self.solution_path):
            self.replay_btn.config(state='normal', text="üé¨ Replay")
            self.status_var.set("üé¨ Ho√†n th√†nh replay animation")
            return
        
        # C·∫≠p nh·∫≠t board
        state = self.solution_path[self.replay_index]
        self.current_board = state.board[:]
        self.update_display()
        
        # C·∫≠p nh·∫≠t status
        step_info = f"Replay b∆∞·ªõc {self.replay_index}: {state.last_move if state.last_move else 'Ban ƒë·∫ßu'}"
        self.status_var.set(step_info)
        
        # Highlight step trong solution text
        self.highlight_current_step()
        
        self.replay_index += 1
        self.root.after(1000, self.replay_step)  # Delay 1 gi√¢y
    
    def highlight_current_step(self):
        """Highlight b∆∞·ªõc hi·ªán t·∫°i trong solution text"""
        self.solution_text.tag_remove('highlight', 1.0, tk.END)
        
        # T√¨m v√† highlight b∆∞·ªõc hi·ªán t·∫°i
        content = self.solution_text.get(1.0, tk.END)
        step_marker = f"B∆∞·ªõc {self.replay_index}:"
        
        start_pos = content.find(step_marker)
        if start_pos != -1:
            start_index = f"1.{start_pos}"
            end_pos = content.find(f"B∆∞·ªõc {self.replay_index + 1}:", start_pos)
            if end_pos == -1:
                end_index = tk.END
            else:
                end_index = f"1.{end_pos}"
            
            self.solution_text.tag_add('highlight', start_index, end_index)
            self.solution_text.tag_config('highlight', background='#3498DB', foreground='white')
            self.solution_text.see(start_index)
    
    def create_custom_puzzle(self):
        """T·∫°o c·ª≠a s·ªï nh·∫≠p puzzle t√πy ch·ªânh"""
        if self.is_solving:
            return
            
        custom_window = tk.Toplevel(self.root)
        custom_window.title("Nh·∫≠p Puzzle T√πy ch·ªânh")
        custom_window.geometry("400x300")
        custom_window.configure(bg='#2C3E50')
        custom_window.transient(self.root)
        custom_window.grab_set()
        
        # Center window
        custom_window.update_idletasks()
        x = (custom_window.winfo_screenwidth() // 2) - (400 // 2)
        y = (custom_window.winfo_screenheight() // 2) - (300 // 2)
        custom_window.geometry(f"+{x}+{y}")
        
        tk.Label(custom_window, text="Nh·∫≠p 16 s·ªë t·ª´ 0-15 (0 l√† √¥ tr·ªëng)",
                font=('Arial', 12, 'bold'), fg='#ECF0F1', bg='#2C3E50').pack(pady=20)
        
        tk.Label(custom_window, text="V√≠ d·ª•: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 0 15",
                font=('Arial', 10), fg='#BDC3C7', bg='#2C3E50').pack(pady=5)
        
        entry_var = tk.StringVar()
        entry = tk.Entry(custom_window, textvariable=entry_var, width=50, 
                        font=('Arial', 12), justify='center')
        entry.pack(pady=20)
        entry.focus()
        
        def apply_custom():
            try:
                numbers = list(map(int, entry_var.get().split()))
                if len(numbers) != 16 or set(numbers) != set(range(16)):
                    messagebox.showerror("L·ªói", "Ph·∫£i nh·∫≠p ƒë√∫ng 16 s·ªë t·ª´ 0-15!")
                    return
                
                self.current_board = numbers
                self.update_display()
                self.clear_solution()
                custom_window.destroy()
                self.status_var.set("ƒê√£ √°p d·ª•ng puzzle t√πy ch·ªânh")
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
        
        button_frame = tk.Frame(custom_window, bg='#2C3E50')
        button_frame.pack(pady=20)
        
        tk.Button(button_frame, text="‚úÖ √Åp d·ª•ng", command=apply_custom,
                 bg='#27AE60', fg='white', font=('Arial', 10, 'bold'),
                 padx=20, pady=5).pack(side='left', padx=10)
        
        tk.Button(button_frame, text="‚ùå H·ªßy", command=custom_window.destroy,
                 bg='#E74C3C', fg='white', font=('Arial', 10, 'bold'),
                 padx=20, pady=5).pack(side='left', padx=10)
        
        # Bind Enter key
        entry.bind('<Return>', lambda e: apply_custom())
    
    def show_algorithm_details(self):
        """Hi·ªÉn th·ªã chi ti·∫øt thu·∫≠t to√°n A*"""
        details_window = tk.Toplevel(self.root)
        details_window.title("Chi ti·∫øt Thu·∫≠t to√°n A*")
        details_window.geometry("600x500")
        details_window.configure(bg='#2C3E50')
        details_window.transient(self.root)
        
        # Center window
        details_window.update_idletasks()
        x = (details_window.winfo_screenwidth() // 2) - (600 // 2)
        y = (details_window.winfo_screenheight() // 2) - (500 // 2)
        details_window.geometry(f"+{x}+{y}")
        
        text_widget = scrolledtext.ScrolledText(details_window, font=('Arial', 11),
                                              bg='#34495E', fg='#ECF0F1',
                                              insertbackground='#ECF0F1')
        text_widget.pack(expand=True, fill='both', padx=20, pady=20)
        
        algorithm_text = """üß† THU·∫¨T TO√ÅN A* (A-STAR SEARCH)

üìñ GI·ªöI THI·ªÜU:
A* l√† thu·∫≠t to√°n t√¨m ki·∫øm c√≥ th√¥ng tin (informed search) ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i 
trong tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ t√¨m ƒë∆∞·ªùng ƒëi t·ªëi ∆∞u t·ª´ tr·∫°ng th√°i ban ƒë·∫ßu ƒë·∫øn ƒë√≠ch.

üî¨ C√îNG TH·ª®C ƒê√ÅNH GI√Å:
f(n) = g(n) + h(n)

Trong ƒë√≥:
‚Ä¢ g(n): Chi ph√≠ th·ª±c t·∫ø t·ª´ tr·∫°ng th√°i ban ƒë·∫ßu ƒë·∫øn tr·∫°ng th√°i n
‚Ä¢ h(n): Heuristic - ∆∞·ªõc t√≠nh chi ph√≠ t·ª´ n ƒë·∫øn tr·∫°ng th√°i ƒë√≠ch
‚Ä¢ f(n): T·ªïng ∆∞·ªõc t√≠nh chi ph√≠ c·ªßa ƒë∆∞·ªùng ƒëi qua n

üéØ HEURISTIC - MANHATTAN DISTANCE:
V·ªõi puzzle 15, ch√∫ng ta s·ª≠ d·ª•ng Manhattan Distance l√†m heuristic:
‚Ä¢ T√≠nh t·ªïng kho·∫£ng c√°ch theo tr·ª•c x v√† y c·ªßa m·ªói √¥ ƒë·∫øn v·ªã tr√≠ ƒë√≠ch
‚Ä¢ C√¥ng th·ª©c: |x1-x2| + |y1-y2| cho m·ªói √¥
‚Ä¢ ƒê√¢y l√† heuristic "admissible" - kh√¥ng bao gi·ªù overestimate chi ph√≠ th·ª±c t·∫ø

‚öôÔ∏è C√ÅCH HO·∫†T ƒê·ªòNG:
1. B·∫Øt ƒë·∫ßu v·ªõi tr·∫°ng th√°i ban ƒë·∫ßu trong frontier (priority queue)
2. L·∫∑p l·∫°i cho ƒë·∫øn khi t√¨m th·∫•y ƒë√≠ch:
   - Ch·ªçn tr·∫°ng th√°i c√≥ f(n) nh·ªè nh·∫•t t·ª´ frontier
   - N·∫øu l√† ƒë√≠ch ‚Üí ho√†n th√†nh
   - N·∫øu kh√¥ng ‚Üí m·ªü r·ªông tr·∫°ng th√°i n√†y
   - Th√™m c√°c tr·∫°ng th√°i k·∫ø ti·∫øp v√†o frontier
   - ƒê√°nh d·∫•u tr·∫°ng th√°i hi·ªán t·∫°i ƒë√£ kh√°m ph√°

üéÆ ƒê·∫∂C ƒêI·ªÇM PUZZLE 15:
‚Ä¢ Kh√¥ng ph·∫£i puzzle n√†o c≈©ng c√≥ th·ªÉ gi·∫£i ƒë∆∞·ª£c
‚Ä¢ Ch·ªâ 50% c√°c c·∫•u h√¨nh ng·∫´u nhi√™n c√≥ th·ªÉ gi·∫£i
‚Ä¢ Ki·ªÉm tra b·∫±ng "inversion count" v√† v·ªã tr√≠ √¥ tr·ªëng

üìà ƒê·ªò PH·ª®C T·∫†P:
‚Ä¢ Time Complexity: O(b^d) trong tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t
‚Ä¢ Space Complexity: O(b^d)
‚Ä¢ V·ªõi puzzle kh√≥ c√≥ th·ªÉ c·∫ßn kh√°m ph√° h√†ng ch·ª•c ngh√¨n tr·∫°ng th√°i

üèÜ ∆ØU ƒêI·ªÇM A*:
‚Ä¢ ƒê·∫£m b·∫£o t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i t·ªëi ∆∞u (n·∫øu heuristic admissible)
‚Ä¢ Hi·ªáu qu·∫£ h∆°n c√°c thu·∫≠t to√°n t√¨m ki·∫øm m√π (blind search)
‚Ä¢ C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh heuristic ƒë·ªÉ c√¢n b·∫±ng t·ªëc ƒë·ªô v√† t·ªëi ∆∞u

üí° HEURISTIC KH√ÅC C√ì TH·ªÇ S·ª¨ D·ª§NG:
‚Ä¢ Linear Conflict: Ph√°t hi·ªán xung ƒë·ªôt trong c√πng h√†ng/c·ªôt
‚Ä¢ Pattern Database: L∆∞u tr·ªØ chi ph√≠ t·ªëi ∆∞u cho c√°c m·∫´u con
‚Ä¢ Walking Distance: K·∫øt h·ª£p Manhattan v·ªõi walking distance"""

        text_widget.insert(tk.END, algorithm_text)
        text_widget.config(state='disabled')
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        # Th√™m menu bar
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # File menu
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üìÅ File", menu=file_menu)
        file_menu.add_command(label="üé≤ Puzzle ng·∫´u nhi√™n", command=self.shuffle_puzzle)
        file_menu.add_command(label="‚úèÔ∏è Nh·∫≠p t√πy ch·ªânh", command=self.create_custom_puzzle)
        file_menu.add_command(label="üìö Puzzle demo", command=self.load_demo_puzzle)
        file_menu.add_separator()
        file_menu.add_command(label="‚ùå Tho√°t", command=self.root.quit)
        
        # Help menu
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚ùì Tr·ª£ gi√∫p", menu=help_menu)
        help_menu.add_command(label="üß† Chi ti·∫øt thu·∫≠t to√°n A*", command=self.show_algorithm_details)
        help_menu.add_command(label="‚ÑπÔ∏è H∆∞·ªõng d·∫´n", command=self.show_instructions)
        
        # B·∫Øt ƒë·∫ßu v·ªõi puzzle x√°o tr·ªôn
        self.shuffle_puzzle()
        
        # Ch·∫°y main loop
        self.root.mainloop()
    
    def show_instructions(self):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        instructions_window = tk.Toplevel(self.root)
        instructions_window.title("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        instructions_window.geometry("500x400")
        instructions_window.configure(bg='#2C3E50')
        instructions_window.transient(self.root)
        
        # Center window
        instructions_window.update_idletasks()
        x = (instructions_window.winfo_screenwidth() // 2) - (500 // 2)
        y = (instructions_window.winfo_screenheight() // 2) - (400 // 2)
        instructions_window.geometry(f"+{x}+{y}")
        
        text_widget = scrolledtext.ScrolledText(instructions_window, font=('Arial', 11),
                                              bg='#34495E', fg='#ECF0F1',
                                              insertbackground='#ECF0F1')
        text_widget.pack(expand=True, fill='both', padx=20, pady=20)
        
        instructions_text = """üéÆ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG 15-PUZZLE SOLVER

üéØ M·ª§C TI√äU:
S·∫Øp x·∫øp c√°c s·ªë t·ª´ 1-15 theo th·ª© t·ª± tƒÉng d·∫ßn, v·ªõi √¥ tr·ªëng ·ªü cu·ªëi.

üé≤ B·∫ÆT ƒê·∫¶U:
1. Nh·∫•n "X√°o tr·ªôn" ƒë·ªÉ t·∫°o puzzle ng·∫´u nhi√™n
2. Ho·∫∑c ch·ªçn "Demo" ƒë·ªÉ th·ª≠ puzzle m·∫´u kh√≥
3. Ho·∫∑c nh·∫≠p puzzle t√πy ch·ªânh qua menu File

üéÆ CH∆†I TH·ª¶ C√îNG:
‚Ä¢ Click v√†o c√°c √¥ s·ªë c·∫°nh √¥ tr·ªëng ƒë·ªÉ di chuy·ªÉn
‚Ä¢ Ch·ªâ c√≥ th·ªÉ di chuy·ªÉn √¥ k·ªÅ v·ªõi √¥ tr·ªëng

ü§ñ GI·∫¢I T·ª∞ ƒê·ªòNG:
‚Ä¢ Nh·∫•n "GI·∫¢I B·∫∞NG A* ALGORITHM" ƒë·ªÉ AI gi·∫£i
‚Ä¢ Theo d√µi th·ªëng k√™ thu·∫≠t to√°n realtime
‚Ä¢ Xem l·ªùi gi·∫£i t·ª´ng b∆∞·ªõc sau khi ho√†n th√†nh

üé¨ T√çNH NƒÇNG REPLAY:
‚Ä¢ Xem animation t·ª´ng b∆∞·ªõc c·ªßa l·ªùi gi·∫£i
‚Ä¢ Theo d√µi c√°ch AI di chuy·ªÉn t·ª´ng √¥

üìä TH·ªêNG K√ä THU·∫¨T TO√ÅN:
‚Ä¢ Tr·∫°ng th√°i kh√°m ph√°: S·ªë state AI ƒë√£ xem x√©t
‚Ä¢ Frontier t·ªëi ƒëa: K√≠ch th∆∞·ªõc queue l·ªõn nh·∫•t
‚Ä¢ ƒê·ªô s√¢u gi·∫£i ph√°p: S·ªë b∆∞·ªõc t·ªëi ∆∞u
‚Ä¢ Manhattan Distance: Gi√° tr·ªã heuristic hi·ªán t·∫°i
‚Ä¢ Chi ph√≠ f(n): T·ªïng g(n) + h(n)

üí° M·∫∏O:
‚Ä¢ Kh√¥ng ph·∫£i puzzle n√†o c≈©ng gi·∫£i ƒë∆∞·ª£c (ch·ªâ ~50%)
‚Ä¢ Puzzle kh√≥ c√≥ th·ªÉ m·∫•t v√†i ph√∫t ƒë·ªÉ gi·∫£i
‚Ä¢ Manhattan Distance c√†ng th·∫•p c√†ng g·∫ßn ƒë√≠ch
‚Ä¢ A* ƒë·∫£m b·∫£o t√¨m l·ªùi gi·∫£i t·ªëi ∆∞u (√≠t b∆∞·ªõc nh·∫•t)

üî¨ V·ªÄ THU·∫¨T TO√ÅN A*:
‚Ä¢ T√¨m ki·∫øm c√≥ th√¥ng tin (informed search)
‚Ä¢ S·ª≠ d·ª•ng heuristic ƒë·ªÉ ƒë·ªãnh h∆∞·ªõng t√¨m ki·∫øm
‚Ä¢ K·∫øt h·ª£p ∆∞u ƒëi·ªÉm c·ªßa Dijkstra v√† Greedy Search
‚Ä¢ ƒê∆∞·ª£c d√πng r·ªông r√£i trong AI, robotics, game development"""

        text_widget.insert(tk.END, instructions_text)
        text_widget.config(state='disabled')

def create_random_solvable_puzzle() -> List[int]:
    """T·∫°o puzzle ng·∫´u nhi√™n c√≥ th·ªÉ gi·∫£i ƒë∆∞·ª£c"""
    puzzle = list(range(16))
    
    # X√°o tr·ªôn b·∫±ng c√°ch th·ª±c hi·ªán c√°c b∆∞·ªõc di chuy·ªÉn h·ª£p l·ªá
    for _ in range(1000):
        empty_pos = puzzle.index(0)
        row, col = empty_pos // 4, empty_pos % 4
        
        moves = []
        if row > 0: moves.append(empty_pos - 4)
        if row < 3: moves.append(empty_pos + 4)
        if col > 0: moves.append(empty_pos - 1)
        if col < 3: moves.append(empty_pos + 1)
        
        new_pos = random.choice(moves)
        puzzle[empty_pos], puzzle[new_pos] = puzzle[new_pos], puzzle[empty_pos]
    
    return puzzle

def main():
    """H√†m main kh·ªüi ch·∫°y ·ª©ng d·ª•ng"""
    print("üöÄ Kh·ªüi ƒë·ªông 15-Puzzle Solver GUI...")
    print("üß† Thu·∫≠t to√°n: A* Search v·ªõi Manhattan Distance Heuristic")
    print("üéØ M·ª•c ti√™u: T√¨m l·ªùi gi·∫£i t·ªëi ∆∞u cho b√†i to√°n 15-puzzle")
    print("-" * 60)
    
    try:
        app = PuzzleGUI()
        app.run()
    except KeyboardInterrupt:
        print("\nüëã ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()

"""
üé® THI·∫æT K·∫æ GIAO DI·ªÜN ƒê·∫∂C ƒêI·ªÇM:

1. üñºÔ∏è LAYOUT CH√çNH:
   - Header v·ªõi ti√™u ƒë·ªÅ gradient animation
   - Panel tr√°i: B·∫£ng puzzle v·ªõi controls
   - Panel ph·∫£i: Th·ªëng k√™ v√† l·ªùi gi·∫£i
   - Menu bar v·ªõi c√°c t√≠nh nƒÉng m·ªü r·ªông

2. üéÆ PUZZLE BOARD:
   - Grid 4x4 v·ªõi animation khi click
   - M√†u s·∫Øc gradient cho c√°c √¥ s·ªë
   - Hover effects v√† transitions m∆∞·ª£t m√†
   - √î tr·ªëng c√≥ styling ri√™ng bi·ªát

3. üìä TH·ªêNG K√ä REAL-TIME:
   - C·∫≠p nh·∫≠t li√™n t·ª•c khi thu·∫≠t to√°n ch·∫°y
   - Hi·ªÉn th·ªã c√°c metrics quan tr·ªçng
   - Color coding cho t·ª´ng lo·∫°i th√¥ng tin
   - Progress bar khi ƒëang gi·∫£i

4. üéØ PANEL L·ªúI GI·∫¢I:
   - ScrolledText ƒë·ªÉ hi·ªÉn th·ªã t·ª´ng b∆∞·ªõc
   - Syntax highlighting cho c√°c b∆∞·ªõc
   - Replay animation v·ªõi highlight
   - Export solution option

5. üé® VISUAL EFFECTS:
   - Gradient backgrounds v√† animations
   - Hover effects tr√™n t·∫•t c·∫£ buttons
   - Smooth transitions khi di chuy·ªÉn √¥
   - Color-coded statistics

6. üì± RESPONSIVE DESIGN:
   - T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh theo k√≠ch th∆∞·ªõc m√†n h√¨nh
   - Mobile-friendly controls
   - Scalable font sizes

7. üîß T√çNH NƒÇNG N√ÇNG CAO:
   - Custom puzzle input dialog
   - Algorithm explanation window
   - Menu system v·ªõi shortcuts
   - Threading ƒë·ªÉ kh√¥ng block UI
   - Progress tracking v·ªõi callbacks

C√ÅCH CH·∫†Y:
python puzzle_gui.py

Giao di·ªán s·∫Ω kh·ªüi ƒë·ªông v·ªõi puzzle ƒë√£ x√°o tr·ªôn s·∫µn s√†ng ƒë·ªÉ gi·∫£i!
"""